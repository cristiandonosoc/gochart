{{- $root := . -}}
// File generated by Gochart version "{{.Version}}" at {{.Time}}
// DO NOT MODIFY!

#pragma once

#include <array>
#include <cassert>
#include <memory>

namespace gochart {

class {{.ImplName}}
{
public:
    using ElementType = uint32_t;

public:
	// Triggers.
	enum class TriggerKind
	{
		{{- range .Statechart.Triggers }}
		{{.Name}},
		{{- end }}
		None,
	};

	{{- range .Statechart.Triggers }}

	struct Trigger{{.Name}}
	{
		static TriggerKind GetKind() { return TriggerKind::{{.Name}}; }
		static const char* GetName();

		// Args.
		{{- range .Args }}
		{{.Type}} {{.Name}};
		{{- end }}
	};

	{{- end }}

public:
	// States.
	enum class StateKind
	{
		{{- range .Statechart.States}}
		{{.Name}},
		{{- end}}
		None,
	};
	static const char* ToString(StateKind state);
	static StateKind ParentState(StateKind state);


    class State {
    public:
        bool IsValid() const { return Kind != StateKind::None; }
        State GetChildState() const;
        State GetParentState() const;

        void PerformEnterReactions();

        bool operator=(const State& other) const { return Kind == other.Kind; }

    private:
        StateKind Kind = StateKind::None;
    };

	{{- end }}

public:
    void Activate();
    void Deactivate();

private:
    // |final_state| is used to determine whether we need to go to a more specific state or we're
    // going to need to use the initial state to determine transition.
    void EnterState(StateKind state, StateKind final_state);

private:
    State CurrentState = {};
};

template <typename TOwner>
class {{.InterfaceName}} {
public:
	std::unique_ptr<{{.InterfaceName}}> Create(TOwner* owner)
	{
		return std::unique_ptr<{{.InterfaceName}}>(new {{.InterfaceName}}(owner));
	}

public:
    void Activate() { Impl.Activate(); }
    void Deactivate() { Impl.Deactivate(); }

public:
	// Trigger Interface.
	{{- range .Statechart.Triggers }}
	void Trigger{{.Name}}({{ .ArgsStringList | join ", " }});
	{{- end }}

	// State Interface.
	{{- range .Statechart.States }}
	{{- if .DefaultEnter }}
	void State{{.Name}}_OnEnter();
	{{- end }}

	{{- if .DefaultExit }}
	void State{{.Name}}_OnExit();
	{{- end }}
	{{- end }}

private:
	{{.InterfaceName}}() = delete;
	{{.InterfaceName}}(TOwner* owner) : Owner(owner) {}

	// No copy construction.
	{{.InterfaceName}}(const {{.InterfaceName}}&) = delete;
	{{.InterfaceName}}& operator=(const {{.InterfaceName}}&) = delete;

	// No move construction.
	{{.InterfaceName}}({{.InterfaceName}}&&) = delete;
	{{.InterfaceName}}& operator=({{.InterfaceName}}&&) = delete;


private:
	TOwner* Owner = nullptr;
	{{.ImplName}} Impl;
};

} // namespace gochart
